from kedro.pipeline import Pipeline, node
from .nodes import (
    load_data,
    print_data_info,
    identify_null_rows,
    convert_rating_to_numeric,
    calculate_average_rating,
    fill_null_ratings,
    check_null_ratings,
    drop_null_matches,
    identify_null_rows_post_partition,
    drop_all_nans,
    final_null_check,
    explore_rating,
    plot_boxplot,
    calculate_iqr,
    plot_distribution_without_outliers,
    check_winner_values,
    transform_winner_to_int,
    count_civilizations,
    plot_top_civilizations,
    diferencia_entre_civilizaciones,
    definir_colores_civilizaciones,
    conteo_matches_validos,
    ordenar_y_filtrar_partidas,
    calcular_diferencias_victorias_derrotas,
    calcular_top_victorias,
    plot_top_victorias,
    calcular_ranking_victorias,
    plot_ranking_victorias,
    calcular_ranking_derrotas,
    plot_ranking_derrotas,
    calcular_winrate_500_1500,
    calcular_winrate_1500_2500,
    plot_winrate_500_1500,
    plot_winrate_1500_2500,
    guardar_particion_final,
    procesar_particion
)

def create_pipeline(**kwargs) -> Pipeline:
    return Pipeline(
        [
            node(
                func=procesar_particion,
                inputs="aoe_2_h2",
                outputs="intermediate_particion_final",
                name="procesar_particion_node",
            ),
            node(
                func=guardar_particion_final,
                inputs="intermediate_particion_final",
                outputs="particion_final_csv",
                name="guardar_particion_final_node",
            ),
            node(func=load_data, inputs="params:filepath", outputs="raw_data", name="load_data_node"),
            node(func=print_data_info, inputs="raw_data", outputs=None, name="print_data_info_node"),
            node(func=identify_null_rows, inputs="raw_data", outputs="data_with_nulls_identified", name="identify_null_rows_node"),
            node(func=convert_rating_to_numeric, inputs="data_with_nulls_identified", outputs="data_numeric_rating", name="convert_rating_to_numeric_node"),
            node(func=calculate_average_rating, inputs="raw_data", outputs="average_rating_by_match", name="calculate_average_rating_node"),
            node(func=fill_null_ratings, inputs=["data_numeric_rating", "average_rating_by_match"], outputs="data_filled_nulls", name="fill_null_ratings_node"),
            node(func=check_null_ratings, inputs="data_filled_nulls", outputs=None, name="check_null_ratings_node"),
            node(func=drop_null_matches, inputs="data_filled_nulls", outputs="data_no_null_matches", name="drop_null_matches_node"),
            node(func=identify_null_rows_post_partition, inputs="data_no_null_matches", outputs="data_after_null_partition", name="identify_null_rows_post_partition_node"),
            node(func=drop_all_nans, inputs="data_after_null_partition", outputs="data_no_nans", name="drop_all_nans_node"),
            node(func=final_null_check, inputs="data_no_nans", outputs=None, name="final_null_check_node"),
            node(func=explore_rating, inputs="data_no_nans", outputs=None, name="explore_rating_node"),
            node(func=plot_boxplot, inputs="data_no_nans", outputs=None, name="plot_boxplot_node"),
            node(func=calculate_iqr, inputs="data_no_nans", outputs="data_no_outliers", name="calculate_iqr_node"),
            node(func=plot_distribution_without_outliers, inputs="data_no_outliers", outputs=None, name="plot_distribution_without_outliers_node"),
            node(func=check_winner_values, inputs="data_no_outliers", outputs=None, name="check_winner_values_node"),
            node(func=transform_winner_to_int, inputs="data_no_outliers", outputs="data_transformed_winner", name="transform_winner_to_int_node"),
            node(func=count_civilizations, inputs="data_transformed_winner", outputs="civilization_counts", name="count_civilizations_node"),
            node(func=plot_top_civilizations, inputs="civilization_counts", outputs=None, name="plot_top_civilizations_node"),
            node(func=diferencia_entre_civilizaciones, inputs="data_transformed_winner", outputs="win_loss_difference", name="diferencia_entre_civilizaciones_node"),
            node(func=definir_colores_civilizaciones, inputs=None, outputs="civilization_colors", name="definir_colores_civilizaciones_node"),
            node(func=conteo_matches_validos, inputs="data_transformed_winner", outputs="valid_matches_data", name="conteo_matches_validos_node"),
            node(func=ordenar_y_filtrar_partidas, inputs="valid_matches_data", outputs="filtered_matches_data", name="ordenar_y_filtrar_partidas_node"),
            node(func=calcular_diferencias_victorias_derrotas, inputs="filtered_matches_data", outputs="victory_loss_differences", name="calcular_diferencias_victorias_derrotas_node"),
            node(func=calcular_top_victorias, inputs="victory_loss_differences", outputs="top_10_victorias", name="calcular_top_victorias_node"),
            node(func=plot_top_victorias, inputs=["top_10_victorias", "civilization_colors"], outputs=None, name="plot_top_victorias_node"),
            node(func=calcular_ranking_victorias, inputs="victory_loss_differences", outputs="victory_ranking", name="calcular_ranking_victorias_node"),
            node(func=plot_ranking_victorias, inputs=["victory_ranking", "civilization_colors"], outputs=None, name="plot_ranking_victorias_node"),
            node(func=calcular_ranking_derrotas, inputs="victory_loss_differences", outputs="defeat_ranking", name="calcular_ranking_derrotas_node"),
            node(func=plot_ranking_derrotas, inputs=["defeat_ranking", "civilization_colors"], outputs=None, name="plot_ranking_derrotas_node"),
            node(func=calcular_winrate_500_1500, inputs="particion_final", outputs="winrate_df_1500", name="calcular_winrate_500_1500_node"),
            node(func=calcular_winrate_1500_2500, inputs="particion_final", outputs="winrate_df_2500", name="calcular_winrate_1500_2500_node"),
            node(func=plot_winrate_500_1500, inputs=["winrate_df_1500", "civilization_colors"], outputs=None, name="plot_winrate_500_1500_node"),
            node(func=plot_winrate_1500_2500, inputs=["winrate_df_2500", "civilization_colors"], outputs=None, name="plot_winrate_1500_2500_node"),
        ]
    )
